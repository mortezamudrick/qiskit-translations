msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-21 17:42+0000\n"
"PO-Revision-Date: 2022-09-22 02:47\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"
"Language: ko_KR\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/grover_with_sampler.ipynb`__ 에서 생성되었다."

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Database search with Grover’s algorithm using the Sampler primitive"
msgstr "Sampler primitive을 활용한 그로버 알고리즘 기반 데이터베이스 검색"

#: ../../tutorials/grover_with_sampler.ipynb:11
msgid "In this tutorial, we will solve an unstructured search problem using Grover’s algorithm with the Sampler primitive Qiskit Runtime program."
msgstr "이 지침서에서는 Sampler primitive Qiskit Runtime 프로그램을 활용한 그로버 검색 알고리즘을 기반으로 비정형 검색 문제를 다룬다."

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Set up your local development environment"
msgstr "로컬 개발 환경 설정하기"

#: ../../tutorials/grover_with_sampler.ipynb:25
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "이 지침서는 Qiskit Runtime 서비스 인스턴스가 필요하다. 이것이 없다면 `이 단계 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ 를 따라 설정을 한다."

#: ../../tutorials/grover_with_sampler.ipynb:37
msgid "Background information"
msgstr "배경 정보"

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Unstructured search problem"
msgstr "비정형 검색 문제"

#: ../../tutorials/grover_with_sampler.ipynb:42
msgid "In the olden days, you looked up a person’s phone number in a phone book. That is an easy task if you know the person’s name because a phone book is ordered alphabetically by name. However, the opposite task, that is, you are given a phone number and want to find out who it belongs to, is much more difficult. That is because a phone book is not ordered by phone numbers. This is an example of an unstructured search problem. To solve this problem with a classical computer, your best trick is to randomly pick an entry. On average, you will need to look up half of the entires (:math:`N/2`, if :math:`N` is the total number of entries) to find the owner. If you have a quantum computer, however, you can use Grover’s algorithm to find the owner in :math:`\\sqrt N` tries. That means to identify the owner in a phone book that has 1 million numbers, you only need to do 1000 tries instead of 500,000!"
msgstr "옛날에는 전화번호부에서 전화번호를 찾았다. 전화번호부에는 이름이 가나다 순으로 정렬되어 있기 때문에 이름만 알면 찾기 쉬웠다. 그러나 반대로, 전화번호로 이름을 찾는 것은 매우 어려운 일이다. 이는 전화번호부가 전화번호순으로 정렬되어 있지 않기 때문이며, 이것이 비정형 검색 문제의 한 예이다. 고전 컴퓨터로 이 문제를 푸는 가장 좋은 방법은 무작위로 시작점을 선택하는 것이다. 그러면 평균적으로 전체 전화번보후 항목의 절반(:math:`N/2`, 전체 항목 수가 :math:`N` 이라고 했을 때)을 살펴봐야한다. 그러나 양자 컴퓨터로는 그로버 알고리즘을 사용해서 :math:`\\sqrt N` 번 만에 이름을 찾을 수 있다. 100만 개의 항목이 있는 전화번호부라면 50만 번이 아닌, 단 1000번 만에 이름을 찾을 수 있다!"

#: ../../tutorials/grover_with_sampler.ipynb:46
msgid "Grover’s algorithm"
msgstr "그로버 알고리즘"

#: ../../tutorials/grover_with_sampler.ipynb:48
msgid "In a nutshell, Grover’s algorithm uses a nice quantum trick called amplitude amplification to dramatically increase the chances of finding the correct answer - the owner of a phone number - in each try (iteration). That’s all we need to know now. We don’t have to understand the details about how Grover’s algorithm works to apply it, because Qiskit does it for us! However, if you are interested, you can read the chapter about Grover’s algorighm in `the Qiskit textbook <https://qiskit.org/textbook/ch-algorithms/grover.html>`__."
msgstr "요약하면, 그로버 알고리즘은 매 시도(반복)마다 정확한 정답(전화번호에 대응되는 이름)을 찾을 확률을 급격히 높이는 진폭 증폭(amplitude amplification)이란 양자 트릭을 사용한다. 지금은 이것만 알아두면 된다. Qiskit에 그로버 알고리즘이 구현되어 있기 때문에 자세한 내용을 이해할 필요는 없다. 하지만 관심이 있다면, 그로버 알고리즘 챕터 `the Qiskit textbook <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ 를 읽어보기 바란다."

#: ../../tutorials/grover_with_sampler.ipynb:51
msgid "Next, let’s look at a concrete example."
msgstr "다음으로 구체적인 예를 살펴보자."

#: ../../tutorials/grover_with_sampler.ipynb:63
msgid "Create Grover’s circuit"
msgstr "그로버 회로 만들기"

#: ../../tutorials/grover_with_sampler.ipynb:66
msgid "Define an unstructured search problem in Qiskit"
msgstr "Qiskit에서 비정형 검색 문제 정의하기"

#: ../../tutorials/grover_with_sampler.ipynb:68
msgid "In this simple example, you are given a small phone book that has 8 entries, person 0 to person 7, and we want to find the owner of a certain phone number. However, we are not allowed to look at the phone book directly. We are only allowed to consult an ‘oracle’: a black-box circuit that immediately tells us if our guess is right or wrong (like the Oracle in “The Matrix”)."
msgstr "이 예제에서는 사람 0부터 사람 7까지 8명이 있는 작은 전화번호부에 대해, 특정 전화번호에 해당하는 이름을 찾고자 한다. 하지만 전화번호부를 직접 볼 수는 없다. 오직 추측이 옳고 그른지를 즉시 알려주는 블랙박스 회로인 오라클 ‘oracle’ (영화 “The Matrix” 에서 오라클과 같이) 을 통해서만 결과를 알 수 있다."

#: ../../tutorials/grover_with_sampler.ipynb:94
msgid "Once we have the oracle, we can define the unstructured search problem using the ``AmplificationProblem`` class in Qiskit."
msgstr "오라클이 있다면, Qiskit에 있는 ``AmplificationProblem`` 클래스를 사용해서 비정형 검색 문제를 정의할 수 있다."

#: ../../tutorials/grover_with_sampler.ipynb:118
msgid "Construct Grover’s circuit for the problem"
msgstr "비정형 검색 문제를 위한 그로버 회로 구성하기"

#: ../../tutorials/grover_with_sampler.ipynb:120
msgid "Now we are ready to construct the quantum circuits for Grover’s algorithm for this problem. Grover’s algorithm’s accuracy in finding the correct answer increases with the number of iterations. Let’s create a circuit with one and two iterations to see this effect."
msgstr "비정형 검색 문제에 대해 그로버 알고리즘을 양자회로로 구성할 준비가 되었다. 정확한 정답을 찾는데 있어, 그로버 알고리즘의 정확도는 반복 횟수에 따라 증가한다. 1회 및 2회 반복하는 회로를 만들어서 이 결과를 확인해보자."

#: ../../tutorials/grover_with_sampler.ipynb:148
msgid "Let’s look at the circuits:"
msgstr "회로 살펴보기"

#: ../../tutorials/grover_with_sampler.ipynb:200
msgid "Submit the circuits to a quantum computer on the cloud"
msgstr "회로를 클라우드 상의 양자 컴퓨터에 제출한다."

#: ../../tutorials/grover_with_sampler.ipynb:202
msgid "Now that the Grover’s circuits are created, let’s submit them to a quantum computer on the cloud by using the Sampler program."
msgstr "이제 그로버 회로가 생성되었으므로, Sampler 프로그램을 사용하여 클라우드 상의 양자 컴퓨터에 회로를 제출해 보자."

#: ../../tutorials/grover_with_sampler.ipynb:214
msgid "Connect to the Qiskit Runtime service"
msgstr "Qiskit Runtime 서비스에 연결하기"

#: ../../tutorials/grover_with_sampler.ipynb:216
msgid "First, connect to the Qiskit Runtime service instance that you created in `the first step <#Set-up-your-local-development-environment>`__."
msgstr "먼저 `첫 번째 단계 <#Set-up-your-local-development-environment>`__ 에서 만든 Qiskit Runtime 서비스 인스턴스에 연결한다."

#: ../../tutorials/grover_with_sampler.ipynb:239
msgid "Grover’s algorithm determines the correct answer based on the highest probability of measurement outcomes. The ``Sampler`` primitive program is perfect for getting probabilities, so we will use that. In the cell below, we create an instance of the ``Sampler`` program, and start a Runtime session using the context manager (``with ... as ... :``), which automatically opens and closes the session for us."
msgstr "그로버 알고리즘은 측정 결과의 가장 높은 확률을 기반으로 정확한 정답을 결정한다. ``Sampler`` primitive은 확률을 구하기에 안성맞춤이기 때문에 사용한다. 아래 셀에서 ``Sampler`` 프로그램의 인스턴스를 만들고 컨텍스트 매니저(``with ... as ... :``) 를 사용해서 런타임 세션을 시작한다. 이때, 컨텍스트 매니저는 자동으로 세션을 열고 닫는다."

#: ../../tutorials/grover_with_sampler.ipynb:241
msgid "The ``Sampler`` program allows a batch submission of circuits in a job. Here we are passing a list of two circuits (Grover with 1 iteration and 2 iterations) to the Sampler but only one call is needed to sample the probability of measurement outcomes of both circuits."
msgstr "``Sampler`` 프로그램 통해 하나의 작업(job) 에서 회로를 일괄적으로 제출할 수 있다. 여기서 두개의 (1회 반복 및 2회 반복하는 그로버) 회로의 리스트 자료형을 ``Sampler`` 로 전달하지만, 단 하나의 호출로 두 회로의 측정결과의 확률을 얻는다."

#: ../../tutorials/grover_with_sampler.ipynb:290
msgid "Let’s look at the results:"
msgstr "결과를 살펴보자."

#: ../../tutorials/grover_with_sampler.ipynb:358
msgid "Let’s print out the quantum result, along with the secret string, to check the quantum computer found the correct answer."
msgstr "양자 컴퓨터가 올바른 정답을 찾았는지 확인하기 위해 ``secret_string`` 변수와 함께 양자 결과를 출력한다."

#: ../../tutorials/grover_with_sampler.ipynb:412
msgid "You can re-run the tutorials a few times to generate other random secret strings to see that we are not cheating! The quantum computer finds the correct answer every time."
msgstr "매번 다른 무작위 ``secret_string`` 변수를 생성해서 여러번 실행해보면 이 지침서가 속임수가 아님을 확인할 수 있다. 양자 컴퓨터는 매번 정답을 찾는다."

